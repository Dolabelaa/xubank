<!-- Banner -->
<p align="center">
  <img src="https://img.shields.io/badge/Xubank-Banco%20Digital-blueviolet?style=for-the-badge&logo=java&logoColor=white" alt="Xubank Banner" />
</p>

<h1 align="center">🏦 Xubank</h1>

<p align="center">
  Um sistema bancário modular desenvolvido em <b>Java</b> para a disciplina de <b>Programação Modular</b> na <b>PUC Minas</b>.
</p>

<p align="center">
  <img src="https://img.shields.io/badge/Java-17-blue?style=for-the-badge&logo=coffeescript&logoColor=white" alt="Java 17" />
  <img src="https://img.shields.io/badge/Status-Em%20Desenvolvimento-yellow?style=for-the-badge" alt="Status" />
  <img src="https://img.shields.io/badge/Licença-MIT-green?style=for-the-badge" alt="Licença MIT" />
</p>

---

## ✨ Funcionalidades

- **👤 Gerenciamento de Clientes**  
  Cadastro, edição, listagem e exclusão de clientes.

- **💳 Gerenciamento de Contas**  
  Suporte a diferentes tipos de conta:
  - Conta Corrente
  - Conta Poupança
  - Conta de Investimento
  - Conta de Renda Fixa

- **💸 Transações Bancárias**  
  Depósitos, saques e transferências entre contas.

- **📊 Relatórios**  
  Geração de relatórios sobre contas, clientes e movimentações.

- **🔐 Sistema de Login**  
  Controle de acesso baseado em autenticação.

- **✅ Validações e Formatações**  
  Entradas de dados validadas e formatadas para maior confiabilidade.

---

## 🏗️ Arquitetura do Projeto

```bash
xubank/
├── src/
│   ├── controller/      # Controladores da aplicação
│   ├── model/           # Modelos das entidades
│   ├── util/            # Classes utilitárias
│   ├── test/            # Testes unitários
│   └── Main.java        # Classe principal

Controller → Lógica de negócio e comunicação entre modelos e visão.

Model → Representa as entidades do sistema (Cliente, Conta, Transação, etc.).

Util → Classes auxiliares, como validadores e formatadores.

Test → Testes unitários para garantir a qualidade do código.

🚀 Tecnologias Utilizadas
Tecnologia	Descrição
Java 17	Linguagem principal do projeto
JUnit	Framework para testes unitários
POO	Paradigma de Programação Orientada a Objetos
Modularização	Organização e separação de responsabilidades

📦 Como Executar o Projeto
🔹 Pré-requisitos

Java JDK 17 ou superior

IDE recomendada: IntelliJ IDEA ou Eclipse

🔹 Passos para execução
# Clone o repositório
git clone https://github.com/seuusuario/xubank.git

# Acesse o diretório do projeto
cd xubank

# Compile o projeto
javac -d bin src/**/*.java

# Execute a aplicação
java -cp bin Main

🧪 Testes

O projeto possui testes unitários com JUnit. Para executá-los:

# Execute os testes com Maven
mvn test

👨‍💻 Autor

Lucas Gonçalves Dolabela
📚 Disciplina: Programação Modular — PUC Minas
📆 Ano/Semestre: 2025/1

<p align="center"> Feito com ❤️ por <b>Lucas Gonçalves Dolabela</b> </p> ```
